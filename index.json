[{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes.html","title":"ProviderImplementation.ProvidedTypes","content":"ProvidedAssembly \nProvidedConstructor \nProvidedEvent \nProvidedField \nProvidedMeasureBuilder \nProvidedMethod \nProvidedParameter \nProvidedProperty \nProvidedStaticParameter \nProvidedTypeBuilder \nProvidedTypeDefinition \nProvidedTypeSymbol \nProvidedTypesContext \nTypeProviderForNamespaces"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedassembly.html","title":"ProvidedAssembly","content":"ProvidedAssembly \n\n A provided generated assembly\n \nProvidedAssembly.( .ctor ) \n( .ctor ) \nProvidedAssembly.( .ctor ) \n( .ctor ) \nProvidedAssembly.AddNestedTypes \nAddNestedTypes \nProvidedAssembly.AddTypes \nAddTypes"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedassembly.html#( .ctor )","title":"ProvidedAssembly.( .ctor )","content":"ProvidedAssembly.( .ctor ) \n( .ctor ) \n\n Create a provided generated assembly using a temporary file as the interim assembly storage\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedassembly.html#( .ctor )","title":"ProvidedAssembly.( .ctor )","content":"ProvidedAssembly.( .ctor ) \n( .ctor ) \n\n Create a provided generated assembly\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedassembly.html#AddNestedTypes","title":"ProvidedAssembly.AddNestedTypes","content":"ProvidedAssembly.AddNestedTypes \nAddNestedTypes \n\n Emit the given nested provided type definitions as part of the assembly.\n and adjust the \u0027Assembly\u0027 property of all provided type definitions to return that\n assembly.\n "},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedassembly.html#AddTypes","title":"ProvidedAssembly.AddTypes","content":"ProvidedAssembly.AddTypes \nAddTypes \n\n Emit the given provided type definitions as part of the assembly\n and adjust the \u0027Assembly\u0027 property of all provided type definitions to return that\n assembly.\n\n The assembly is only emitted when the Assembly property on the root type is accessed for the first time.\n The host F# compiler does this when processing a generative type declaration for the type.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedconstructor.html","title":"ProvidedConstructor","content":"ProvidedConstructor \n\n Represents an erased provided constructor.\n \nProvidedConstructor.( .ctor ) \n( .ctor ) \nProvidedConstructor.AddDefinitionLocation \nAddDefinitionLocation \nProvidedConstructor.AddObsoleteAttribute \nAddObsoleteAttribute \nProvidedConstructor.AddXmlDoc \nAddXmlDoc \nProvidedConstructor.AddXmlDocComputed \nAddXmlDocComputed \nProvidedConstructor.AddXmlDocDelayed \nAddXmlDocDelayed \nProvidedConstructor.IsImplicitConstructor \nIsImplicitConstructor \nProvidedConstructor.BaseConstructorCall \nBaseConstructorCall \nProvidedConstructor.IsTypeInitializer \nIsTypeInitializer"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedconstructor.html#( .ctor )","title":"ProvidedConstructor.( .ctor )","content":"ProvidedConstructor.( .ctor ) \n( .ctor ) \n\n When making a cross-targeting type provider, use this method instead of the ProvidedConstructor constructor from ProvidedTypes\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedconstructor.html#AddDefinitionLocation","title":"ProvidedConstructor.AddDefinitionLocation","content":"ProvidedConstructor.AddDefinitionLocation \nAddDefinitionLocation \n\n Add definition location information to the provided constructor.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedconstructor.html#AddObsoleteAttribute","title":"ProvidedConstructor.AddObsoleteAttribute","content":"ProvidedConstructor.AddObsoleteAttribute \nAddObsoleteAttribute \n\n Add a \u0027Obsolete\u0027 attribute to this provided constructor\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedconstructor.html#AddXmlDoc","title":"ProvidedConstructor.AddXmlDoc","content":"ProvidedConstructor.AddXmlDoc \nAddXmlDoc \n\n Add XML documentation information to this provided constructor\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedconstructor.html#AddXmlDocComputed","title":"ProvidedConstructor.AddXmlDocComputed","content":"ProvidedConstructor.AddXmlDocComputed \nAddXmlDocComputed \n\n Add XML documentation information to this provided constructor, where the documentation is re-computed  every time it is required.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedconstructor.html#AddXmlDocDelayed","title":"ProvidedConstructor.AddXmlDocDelayed","content":"ProvidedConstructor.AddXmlDocDelayed \nAddXmlDocDelayed \n\n Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedconstructor.html#IsImplicitConstructor","title":"ProvidedConstructor.IsImplicitConstructor","content":"ProvidedConstructor.IsImplicitConstructor \nIsImplicitConstructor \n\n Set a flag indicating that the constructor acts like an F# implicit constructor, so the\n parameters of the constructor become fields and can be accessed using Expr.GlobalVar with the\n same name.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedconstructor.html#BaseConstructorCall","title":"ProvidedConstructor.BaseConstructorCall","content":"ProvidedConstructor.BaseConstructorCall \nBaseConstructorCall \n\n Set the target and arguments of the base constructor call. Only used for generated types.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedconstructor.html#IsTypeInitializer","title":"ProvidedConstructor.IsTypeInitializer","content":"ProvidedConstructor.IsTypeInitializer \nIsTypeInitializer \n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedevent.html","title":"ProvidedEvent","content":"ProvidedEvent \n\n Represents an erased provided property.\n \nProvidedEvent.( .ctor ) \n( .ctor ) \nProvidedEvent.AddDefinitionLocation \nAddDefinitionLocation \nProvidedEvent.AddXmlDoc \nAddXmlDoc \nProvidedEvent.AddXmlDocComputed \nAddXmlDocComputed \nProvidedEvent.AddXmlDocDelayed \nAddXmlDocDelayed \nProvidedEvent.IsStatic \nIsStatic"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedevent.html#( .ctor )","title":"ProvidedEvent.( .ctor )","content":"ProvidedEvent.( .ctor ) \n( .ctor ) \n\n Create a new provided event. It is not initially associated with any specific provided type definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedevent.html#AddDefinitionLocation","title":"ProvidedEvent.AddDefinitionLocation","content":"ProvidedEvent.AddDefinitionLocation \nAddDefinitionLocation \n\n Add definition location information to the provided type definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedevent.html#AddXmlDoc","title":"ProvidedEvent.AddXmlDoc","content":"ProvidedEvent.AddXmlDoc \nAddXmlDoc \n\n Add XML documentation information to this provided constructor\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedevent.html#AddXmlDocComputed","title":"ProvidedEvent.AddXmlDocComputed","content":"ProvidedEvent.AddXmlDocComputed \nAddXmlDocComputed \n\n Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary\n The documentation is re-computed  every time it is required.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedevent.html#AddXmlDocDelayed","title":"ProvidedEvent.AddXmlDocDelayed","content":"ProvidedEvent.AddXmlDocDelayed \nAddXmlDocDelayed \n\n Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedevent.html#IsStatic","title":"ProvidedEvent.IsStatic","content":"ProvidedEvent.IsStatic \nIsStatic \n\n Get a flag indicating if the property is static.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedfield.html","title":"ProvidedField","content":"ProvidedField \n\n Represents an erased provided field.\n \nProvidedField.( .ctor ) \n( .ctor ) \nProvidedField.AddCustomAttribute \nAddCustomAttribute \nProvidedField.AddDefinitionLocation \nAddDefinitionLocation \nProvidedField.AddObsoleteAttribute \nAddObsoleteAttribute \nProvidedField.AddXmlDoc \nAddXmlDoc \nProvidedField.AddXmlDocComputed \nAddXmlDocComputed \nProvidedField.AddXmlDocDelayed \nAddXmlDocDelayed \nProvidedField.SetFieldAttributes \nSetFieldAttributes \nProvidedField.Literal \nLiteral"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedfield.html#( .ctor )","title":"ProvidedField.( .ctor )","content":"ProvidedField.( .ctor ) \n( .ctor ) \n\n Create a new provided field. It is not initially associated with any specific provided type definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedfield.html#AddCustomAttribute","title":"ProvidedField.AddCustomAttribute","content":"ProvidedField.AddCustomAttribute \nAddCustomAttribute \n\n Add a custom attribute to the provided property definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedfield.html#AddDefinitionLocation","title":"ProvidedField.AddDefinitionLocation","content":"ProvidedField.AddDefinitionLocation \nAddDefinitionLocation \n\n Add definition location information to the provided field definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedfield.html#AddObsoleteAttribute","title":"ProvidedField.AddObsoleteAttribute","content":"ProvidedField.AddObsoleteAttribute \nAddObsoleteAttribute \n\n Add a \u0027Obsolete\u0027 attribute to this provided field\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedfield.html#AddXmlDoc","title":"ProvidedField.AddXmlDoc","content":"ProvidedField.AddXmlDoc \nAddXmlDoc \n\n Add XML documentation information to this provided field\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedfield.html#AddXmlDocComputed","title":"ProvidedField.AddXmlDocComputed","content":"ProvidedField.AddXmlDocComputed \nAddXmlDocComputed \n\n Add XML documentation information to this provided field, where the computation of the documentation is delayed until necessary\n The documentation is re-computed  every time it is required.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedfield.html#AddXmlDocDelayed","title":"ProvidedField.AddXmlDocDelayed","content":"ProvidedField.AddXmlDocDelayed \nAddXmlDocDelayed \n\n Add XML documentation information to this provided field, where the computation of the documentation is delayed until necessary\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedfield.html#SetFieldAttributes","title":"ProvidedField.SetFieldAttributes","content":"ProvidedField.SetFieldAttributes \nSetFieldAttributes \n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedfield.html#Literal","title":"ProvidedField.Literal","content":"ProvidedField.Literal \nLiteral \n\n Create a new provided literal field. It is not initially associated with any specific provided type definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmeasurebuilder.html","title":"ProvidedMeasureBuilder","content":"ProvidedMeasureBuilder \n\n Helps create erased provided unit-of-measure annotations.\n \nProvidedMeasureBuilder.AnnotateType \nAnnotateType \nProvidedMeasureBuilder.Inverse \nInverse \nProvidedMeasureBuilder.Product \nProduct \nProvidedMeasureBuilder.Ratio \nRatio \nProvidedMeasureBuilder.SI \nSI \nProvidedMeasureBuilder.Square \nSquare \nProvidedMeasureBuilder.One \nOne"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmeasurebuilder.html#AnnotateType","title":"ProvidedMeasureBuilder.AnnotateType","content":"ProvidedMeasureBuilder.AnnotateType \nAnnotateType \n\n Returns a type where the type has been annotated with the given types and/or units-of-measure.\n e.g. float\u003Ckg\u003E, Vector\u003Cint, kg\u003E\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmeasurebuilder.html#Inverse","title":"ProvidedMeasureBuilder.Inverse","content":"ProvidedMeasureBuilder.Inverse \nInverse \n\n Returns the measure indicating the inverse of two units of measure, e.g. 1 / s\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmeasurebuilder.html#Product","title":"ProvidedMeasureBuilder.Product","content":"ProvidedMeasureBuilder.Product \nProduct \n\n Returns the measure indicating the product of two units of measure, e.g. kg * m\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmeasurebuilder.html#Ratio","title":"ProvidedMeasureBuilder.Ratio","content":"ProvidedMeasureBuilder.Ratio \nRatio \n\n Returns the measure indicating the ratio of two units of measure, e.g. kg / m\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmeasurebuilder.html#SI","title":"ProvidedMeasureBuilder.SI","content":"ProvidedMeasureBuilder.SI \nSI \n\n Returns the measure for an SI unit from the F# core library, where the string is in capitals and US spelling, e.g. Meter\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmeasurebuilder.html#Square","title":"ProvidedMeasureBuilder.Square","content":"ProvidedMeasureBuilder.Square \nSquare \n\n Returns the measure indicating the square of a unit of measure, e.g. m * m\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmeasurebuilder.html#One","title":"ProvidedMeasureBuilder.One","content":"ProvidedMeasureBuilder.One \nOne \n\n Gets the measure indicating the \u00221\u0022 unit of measure, that is the unitless measure.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmethod.html","title":"ProvidedMethod","content":"ProvidedMethod \n \nProvidedMethod.( .ctor ) \n( .ctor ) \nProvidedMethod.AddCustomAttribute \nAddCustomAttribute \nProvidedMethod.AddDefinitionLocation \nAddDefinitionLocation \nProvidedMethod.AddMethodAttrs \nAddMethodAttrs \nProvidedMethod.AddObsoleteAttribute \nAddObsoleteAttribute \nProvidedMethod.AddXmlDoc \nAddXmlDoc \nProvidedMethod.AddXmlDocComputed \nAddXmlDocComputed \nProvidedMethod.AddXmlDocDelayed \nAddXmlDocDelayed \nProvidedMethod.DefineStaticParameters \nDefineStaticParameters \nProvidedMethod.SetMethodAttrs \nSetMethodAttrs"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmethod.html#( .ctor )","title":"ProvidedMethod.( .ctor )","content":"ProvidedMethod.( .ctor ) \n( .ctor ) \n\n When making a cross-targeting type provider, use this method instead of the ProvidedMethod constructor from ProvidedTypes\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmethod.html#AddCustomAttribute","title":"ProvidedMethod.AddCustomAttribute","content":"ProvidedMethod.AddCustomAttribute \nAddCustomAttribute \n\n Add a custom attribute to the provided method definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmethod.html#AddDefinitionLocation","title":"ProvidedMethod.AddDefinitionLocation","content":"ProvidedMethod.AddDefinitionLocation \nAddDefinitionLocation \n\n Add definition location information to the provided type definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmethod.html#AddMethodAttrs","title":"ProvidedMethod.AddMethodAttrs","content":"ProvidedMethod.AddMethodAttrs \nAddMethodAttrs \n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmethod.html#AddObsoleteAttribute","title":"ProvidedMethod.AddObsoleteAttribute","content":"ProvidedMethod.AddObsoleteAttribute \nAddObsoleteAttribute \n\n Add XML documentation information to this provided method\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmethod.html#AddXmlDoc","title":"ProvidedMethod.AddXmlDoc","content":"ProvidedMethod.AddXmlDoc \nAddXmlDoc \n\n Add XML documentation information to this provided constructor\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmethod.html#AddXmlDocComputed","title":"ProvidedMethod.AddXmlDocComputed","content":"ProvidedMethod.AddXmlDocComputed \nAddXmlDocComputed \n\n Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary\n The documentation is re-computed  every time it is required.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmethod.html#AddXmlDocDelayed","title":"ProvidedMethod.AddXmlDocDelayed","content":"ProvidedMethod.AddXmlDocDelayed \nAddXmlDocDelayed \n\n Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmethod.html#DefineStaticParameters","title":"ProvidedMethod.DefineStaticParameters","content":"ProvidedMethod.DefineStaticParameters \nDefineStaticParameters \n\n Define the static parameters available on a statically parameterized method\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedmethod.html#SetMethodAttrs","title":"ProvidedMethod.SetMethodAttrs","content":"ProvidedMethod.SetMethodAttrs \nSetMethodAttrs \n\n Set the method attributes of the method. By default these are simple \u0027MethodAttributes.Public\u0027\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedparameter.html","title":"ProvidedParameter","content":"ProvidedParameter \n\n Represents an erased provided parameter\n \nProvidedParameter.( .ctor ) \n( .ctor ) \nProvidedParameter.AddCustomAttribute \nAddCustomAttribute \nProvidedParameter.HasDefaultParameterValue \nHasDefaultParameterValue \nProvidedParameter.IsParamArray \nIsParamArray \nProvidedParameter.IsReflectedDefinition \nIsReflectedDefinition"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedparameter.html#( .ctor )","title":"ProvidedParameter.( .ctor )","content":"ProvidedParameter.( .ctor ) \n( .ctor ) \n\n Create a new provided parameter.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedparameter.html#AddCustomAttribute","title":"ProvidedParameter.AddCustomAttribute","content":"ProvidedParameter.AddCustomAttribute \nAddCustomAttribute \n\n Add a custom attribute to the provided parameter.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedparameter.html#HasDefaultParameterValue","title":"ProvidedParameter.HasDefaultParameterValue","content":"ProvidedParameter.HasDefaultParameterValue \nHasDefaultParameterValue \n\n Indicates if the parameter has a default value\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedparameter.html#IsParamArray","title":"ProvidedParameter.IsParamArray","content":"ProvidedParameter.IsParamArray \nIsParamArray \n\n Indicates if the parameter is marked as ParamArray\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedparameter.html#IsReflectedDefinition","title":"ProvidedParameter.IsReflectedDefinition","content":"ProvidedParameter.IsReflectedDefinition \nIsReflectedDefinition \n\n Indicates if the parameter is marked as ReflectedDefinition\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedproperty.html","title":"ProvidedProperty","content":"ProvidedProperty \n\n Represents an erased provided property.\n \nProvidedProperty.( .ctor ) \n( .ctor ) \nProvidedProperty.AddCustomAttribute \nAddCustomAttribute \nProvidedProperty.AddDefinitionLocation \nAddDefinitionLocation \nProvidedProperty.AddObsoleteAttribute \nAddObsoleteAttribute \nProvidedProperty.AddXmlDoc \nAddXmlDoc \nProvidedProperty.AddXmlDocComputed \nAddXmlDocComputed \nProvidedProperty.AddXmlDocDelayed \nAddXmlDocDelayed \nProvidedProperty.IsStatic \nIsStatic"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedproperty.html#( .ctor )","title":"ProvidedProperty.( .ctor )","content":"ProvidedProperty.( .ctor ) \n( .ctor ) \n\n Create a new provided property. It is not initially associated with any specific provided type definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedproperty.html#AddCustomAttribute","title":"ProvidedProperty.AddCustomAttribute","content":"ProvidedProperty.AddCustomAttribute \nAddCustomAttribute \n\n Add a custom attribute to the provided property definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedproperty.html#AddDefinitionLocation","title":"ProvidedProperty.AddDefinitionLocation","content":"ProvidedProperty.AddDefinitionLocation \nAddDefinitionLocation \n\n Add definition location information to the provided type definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedproperty.html#AddObsoleteAttribute","title":"ProvidedProperty.AddObsoleteAttribute","content":"ProvidedProperty.AddObsoleteAttribute \nAddObsoleteAttribute \n\n Add a \u0027Obsolete\u0027 attribute to this provided property\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedproperty.html#AddXmlDoc","title":"ProvidedProperty.AddXmlDoc","content":"ProvidedProperty.AddXmlDoc \nAddXmlDoc \n\n Add XML documentation information to this provided constructor\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedproperty.html#AddXmlDocComputed","title":"ProvidedProperty.AddXmlDocComputed","content":"ProvidedProperty.AddXmlDocComputed \nAddXmlDocComputed \n\n Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary\n The documentation is re-computed  every time it is required.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedproperty.html#AddXmlDocDelayed","title":"ProvidedProperty.AddXmlDocDelayed","content":"ProvidedProperty.AddXmlDocDelayed \nAddXmlDocDelayed \n\n Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedproperty.html#IsStatic","title":"ProvidedProperty.IsStatic","content":"ProvidedProperty.IsStatic \nIsStatic \n\n Get or set a flag indicating if the property is static.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedstaticparameter.html","title":"ProvidedStaticParameter","content":"ProvidedStaticParameter \n\n Represents a provided static parameter.\n \nProvidedStaticParameter.( .ctor ) \n( .ctor ) \nProvidedStaticParameter.AddXmlDoc \nAddXmlDoc \nProvidedStaticParameter.AddXmlDocDelayed \nAddXmlDocDelayed"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedstaticparameter.html#( .ctor )","title":"ProvidedStaticParameter.( .ctor )","content":"ProvidedStaticParameter.( .ctor ) \n( .ctor ) \n\n Create a new provided static parameter, for use with DefineStaticParamaeters on a provided type definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedstaticparameter.html#AddXmlDoc","title":"ProvidedStaticParameter.AddXmlDoc","content":"ProvidedStaticParameter.AddXmlDoc \nAddXmlDoc \n\n Add XML documentation information to this provided constructor\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedstaticparameter.html#AddXmlDocDelayed","title":"ProvidedStaticParameter.AddXmlDocDelayed","content":"ProvidedStaticParameter.AddXmlDocDelayed \nAddXmlDocDelayed \n\n Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypebuilder.html","title":"ProvidedTypeBuilder","content":"ProvidedTypeBuilder \n\n Helpers to build symbolic provided types\n \nProvidedTypeBuilder.MakeGenericMethod \nMakeGenericMethod \nProvidedTypeBuilder.MakeGenericType \nMakeGenericType \nProvidedTypeBuilder.MakeTupleType \nMakeTupleType \nProvidedTypeBuilder.MakeTupleType \nMakeTupleType"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypebuilder.html#MakeGenericMethod","title":"ProvidedTypeBuilder.MakeGenericMethod","content":"ProvidedTypeBuilder.MakeGenericMethod \nMakeGenericMethod \n\n Like methodInfo.MakeGenericMethod, but will also work with unit-annotated types and provided types\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypebuilder.html#MakeGenericType","title":"ProvidedTypeBuilder.MakeGenericType","content":"ProvidedTypeBuilder.MakeGenericType \nMakeGenericType \n\n Like typ.MakeGenericType, but will also work with unit-annotated types\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypebuilder.html#MakeTupleType","title":"ProvidedTypeBuilder.MakeTupleType","content":"ProvidedTypeBuilder.MakeTupleType \nMakeTupleType \n\n Like FsharpType.MakeTupleType, but will also work with unit-annotated types and provided types\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypebuilder.html#MakeTupleType","title":"ProvidedTypeBuilder.MakeTupleType","content":"ProvidedTypeBuilder.MakeTupleType \nMakeTupleType \n\n Like FsharpType.MakeTupleType, but will also work with unit-annotated types and provided types\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html","title":"ProvidedTypeDefinition","content":"ProvidedTypeDefinition \n\n Represents a provided type definition.\n \nProvidedTypeDefinition.( .ctor ) \n( .ctor ) \nProvidedTypeDefinition.( .ctor ) \n( .ctor ) \nProvidedTypeDefinition.AddAssemblyTypesAsNestedTypesDelayed \nAddAssemblyTypesAsNestedTypesDelayed \nProvidedTypeDefinition.AddCustomAttribute \nAddCustomAttribute \nProvidedTypeDefinition.AddDefinitionLocation \nAddDefinitionLocation \nProvidedTypeDefinition.AddInterfaceImplementation \nAddInterfaceImplementation \nProvidedTypeDefinition.AddInterfaceImplementationsDelayed \nAddInterfaceImplementationsDelayed \nProvidedTypeDefinition.AddMember \nAddMember \nProvidedTypeDefinition.AddMemberDelayed \nAddMemberDelayed \nProvidedTypeDefinition.AddMembers \nAddMembers \nProvidedTypeDefinition.AddMembersDelayed \nAddMembersDelayed \nProvidedTypeDefinition.AddObsoleteAttribute \nAddObsoleteAttribute \nProvidedTypeDefinition.AddXmlDoc \nAddXmlDoc \nProvidedTypeDefinition.AddXmlDocComputed \nAddXmlDocComputed \nProvidedTypeDefinition.AddXmlDocDelayed \nAddXmlDocDelayed \nProvidedTypeDefinition.ApplyStaticArguments \nApplyStaticArguments \nProvidedTypeDefinition.DefineMethodOverride \nDefineMethodOverride \nProvidedTypeDefinition.DefineMethodOverridesDelayed \nDefineMethodOverridesDelayed \nProvidedTypeDefinition.DefineStaticParameters \nDefineStaticParameters \nProvidedTypeDefinition.SetAttributes \nSetAttributes \nProvidedTypeDefinition.SetBaseType \nSetBaseType \nProvidedTypeDefinition.SetBaseTypeDelayed \nSetBaseTypeDelayed \nProvidedTypeDefinition.SetEnumUnderlyingType \nSetEnumUnderlyingType \nProvidedTypeDefinition.SuppressRelocation \nSuppressRelocation \nProvidedTypeDefinition.NonNullable \nNonNullable \nProvidedTypeDefinition.IsErased \nIsErased \nProvidedTypeDefinition.HideObjectMethods \nHideObjectMethods \nProvidedTypeDefinition.EraseType \nEraseType \nProvidedTypeDefinition.Logger \nLogger"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#( .ctor )","title":"ProvidedTypeDefinition.( .ctor )","content":"ProvidedTypeDefinition.( .ctor ) \n( .ctor ) \n\n When making a cross-targeting type provider, use this method instead of the corresponding ProvidedTypeDefinition constructor from ProvidedTypes\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#( .ctor )","title":"ProvidedTypeDefinition.( .ctor )","content":"ProvidedTypeDefinition.( .ctor ) \n( .ctor ) \n\n When making a cross-targeting type provider, use this method instead of the corresponding ProvidedTypeDefinition constructor from ProvidedTypes\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddAssemblyTypesAsNestedTypesDelayed","title":"ProvidedTypeDefinition.AddAssemblyTypesAsNestedTypesDelayed","content":"ProvidedTypeDefinition.AddAssemblyTypesAsNestedTypesDelayed \nAddAssemblyTypesAsNestedTypesDelayed \n\n Add the types of the generated assembly as generative types, where types in namespaces get hierarchically positioned as nested types.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddCustomAttribute","title":"ProvidedTypeDefinition.AddCustomAttribute","content":"ProvidedTypeDefinition.AddCustomAttribute \nAddCustomAttribute \n\n Add a custom attribute to the provided type definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddDefinitionLocation","title":"ProvidedTypeDefinition.AddDefinitionLocation","content":"ProvidedTypeDefinition.AddDefinitionLocation \nAddDefinitionLocation \n\n Add definition location information to the provided type definition.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddInterfaceImplementation","title":"ProvidedTypeDefinition.AddInterfaceImplementation","content":"ProvidedTypeDefinition.AddInterfaceImplementation \nAddInterfaceImplementation \n\n Add the given type as an implemented interface.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddInterfaceImplementationsDelayed","title":"ProvidedTypeDefinition.AddInterfaceImplementationsDelayed","content":"ProvidedTypeDefinition.AddInterfaceImplementationsDelayed \nAddInterfaceImplementationsDelayed \n\n Add the given function as a set of on-demand computed interfaces.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddMember","title":"ProvidedTypeDefinition.AddMember","content":"ProvidedTypeDefinition.AddMember \nAddMember \n\n Add a method, property, nested type or other member to a ProvidedTypeDefinition\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddMemberDelayed","title":"ProvidedTypeDefinition.AddMemberDelayed","content":"ProvidedTypeDefinition.AddMemberDelayed \nAddMemberDelayed \n\n Add a member to a ProvidedTypeDefinition, delaying computation of the members until required by the compilation context.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddMembers","title":"ProvidedTypeDefinition.AddMembers","content":"ProvidedTypeDefinition.AddMembers \nAddMembers \n\n Add a set of members to a ProvidedTypeDefinition\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddMembersDelayed","title":"ProvidedTypeDefinition.AddMembersDelayed","content":"ProvidedTypeDefinition.AddMembersDelayed \nAddMembersDelayed \n\n Add a set of members to a ProvidedTypeDefinition, delaying computation of the members until required by the compilation context.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddObsoleteAttribute","title":"ProvidedTypeDefinition.AddObsoleteAttribute","content":"ProvidedTypeDefinition.AddObsoleteAttribute \nAddObsoleteAttribute \n\n Add a \u0027Obsolete\u0027 attribute to this provided type definition\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddXmlDoc","title":"ProvidedTypeDefinition.AddXmlDoc","content":"ProvidedTypeDefinition.AddXmlDoc \nAddXmlDoc \n\n Add XML documentation information to this provided constructor\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddXmlDocComputed","title":"ProvidedTypeDefinition.AddXmlDocComputed","content":"ProvidedTypeDefinition.AddXmlDocComputed \nAddXmlDocComputed \n\n Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary\n The documentation is re-computed  every time it is required.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#AddXmlDocDelayed","title":"ProvidedTypeDefinition.AddXmlDocDelayed","content":"ProvidedTypeDefinition.AddXmlDocDelayed \nAddXmlDocDelayed \n\n Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary.\n The documentation is only computed once.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#ApplyStaticArguments","title":"ProvidedTypeDefinition.ApplyStaticArguments","content":"ProvidedTypeDefinition.ApplyStaticArguments \nApplyStaticArguments \n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#DefineMethodOverride","title":"ProvidedTypeDefinition.DefineMethodOverride","content":"ProvidedTypeDefinition.DefineMethodOverride \nDefineMethodOverride \n\n Specifies that the given method body implements the given method declaration.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#DefineMethodOverridesDelayed","title":"ProvidedTypeDefinition.DefineMethodOverridesDelayed","content":"ProvidedTypeDefinition.DefineMethodOverridesDelayed \nDefineMethodOverridesDelayed \n\n Specifies that the given method bodies implement the given method declarations\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#DefineStaticParameters","title":"ProvidedTypeDefinition.DefineStaticParameters","content":"ProvidedTypeDefinition.DefineStaticParameters \nDefineStaticParameters \n\n Define the static parameters available on a statically parameterized type\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#SetAttributes","title":"ProvidedTypeDefinition.SetAttributes","content":"ProvidedTypeDefinition.SetAttributes \nSetAttributes \n\n Set the attributes on the provided type. This fully replaces the default TypeAttributes.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#SetBaseType","title":"ProvidedTypeDefinition.SetBaseType","content":"ProvidedTypeDefinition.SetBaseType \nSetBaseType \n\n Set the base type\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#SetBaseTypeDelayed","title":"ProvidedTypeDefinition.SetBaseTypeDelayed","content":"ProvidedTypeDefinition.SetBaseTypeDelayed \nSetBaseTypeDelayed \n\n Set the base type to a lazily evaluated value. Use this to delay realization of the base type as late as possible.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#SetEnumUnderlyingType","title":"ProvidedTypeDefinition.SetEnumUnderlyingType","content":"ProvidedTypeDefinition.SetEnumUnderlyingType \nSetEnumUnderlyingType \n\n Set underlying type for generated enums\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#SuppressRelocation","title":"ProvidedTypeDefinition.SuppressRelocation","content":"ProvidedTypeDefinition.SuppressRelocation \nSuppressRelocation \n\n Get or set a flag indicating if the ProvidedTypeDefinition has type-relocation suppressed\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#NonNullable","title":"ProvidedTypeDefinition.NonNullable","content":"ProvidedTypeDefinition.NonNullable \nNonNullable \n\n Disallows the use of the null literal.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#IsErased","title":"ProvidedTypeDefinition.IsErased","content":"ProvidedTypeDefinition.IsErased \nIsErased \n\n Get a flag indicating if the ProvidedTypeDefinition is erased\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#HideObjectMethods","title":"ProvidedTypeDefinition.HideObjectMethods","content":"ProvidedTypeDefinition.HideObjectMethods \nHideObjectMethods \n\n Suppress Object entries in intellisense menus in instances of this provided type\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#EraseType","title":"ProvidedTypeDefinition.EraseType","content":"ProvidedTypeDefinition.EraseType \nEraseType \n\n Emulate the F# type provider type erasure mechanism to get the\n actual (erased) type. We erase ProvidedTypes to their base type\n and we erase array of provided type to array of base type. In the\n case of generics all the generic type arguments are also recursively\n replaced with the erased-to types\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypedefinition.html#Logger","title":"ProvidedTypeDefinition.Logger","content":"ProvidedTypeDefinition.Logger \nLogger \n\n Get or set a utility function to log the creation of root Provided Type. Used to debug caching/invalidation.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypesymbol.html","title":"ProvidedTypeSymbol","content":"ProvidedTypeSymbol \n\n Represents an array or other symbolic type involving a provided type as the argument.\n See the type provider spec for the methods that must be implemented.\n Note that the type provider specification does not require us to implement pointer-equality for provided types.\n \nProvidedTypeSymbol.IsFSharpTypeAbbreviation \nIsFSharpTypeAbbreviation \nProvidedTypeSymbol.IsFSharpUnitAnnotated \nIsFSharpUnitAnnotated"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypesymbol.html#IsFSharpTypeAbbreviation","title":"ProvidedTypeSymbol.IsFSharpTypeAbbreviation","content":"ProvidedTypeSymbol.IsFSharpTypeAbbreviation \nIsFSharpTypeAbbreviation \n\n For example, kg\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypesymbol.html#IsFSharpUnitAnnotated","title":"ProvidedTypeSymbol.IsFSharpUnitAnnotated","content":"ProvidedTypeSymbol.IsFSharpUnitAnnotated \nIsFSharpUnitAnnotated \n\n For example, int\u003Ckg\u003E or int\u003Ckilogram\u003E\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html","title":"ProvidedTypesContext","content":"ProvidedTypesContext \n\n Represents the context for which code is to be generated. Normally you should not need to use this directly.\n \nProvidedTypesContext.AddSourceAssembly \nAddSourceAssembly \nProvidedTypesContext.ConvertSourceExprToTarget \nConvertSourceExprToTarget \nProvidedTypesContext.ConvertSourceTypeToTarget \nConvertSourceTypeToTarget \nProvidedTypesContext.ConvertTargetTypeToSource \nConvertTargetTypeToSource \nProvidedTypesContext.GetSourceAssemblies \nGetSourceAssemblies \nProvidedTypesContext.GetTargetAssemblies \nGetTargetAssemblies \nProvidedTypesContext.ReadRelatedAssembly \nReadRelatedAssembly \nProvidedTypesContext.ReadRelatedAssembly \nReadRelatedAssembly \nProvidedTypesContext.TryBindAssemblyNameToTarget \nTryBindAssemblyNameToTarget \nProvidedTypesContext.TryBindSimpleAssemblyNameToTarget \nTryBindSimpleAssemblyNameToTarget \nProvidedTypesContext.ReferencedAssemblyPaths \nReferencedAssemblyPaths \nProvidedTypesContext.FSharpCoreAssemblyVersion \nFSharpCoreAssemblyVersion"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html#AddSourceAssembly","title":"ProvidedTypesContext.AddSourceAssembly","content":"ProvidedTypesContext.AddSourceAssembly \nAddSourceAssembly \n\n Add an assembly to the set of design-time assemblies available to use as a basis for authoring provided types\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html#ConvertSourceExprToTarget","title":"ProvidedTypesContext.ConvertSourceExprToTarget","content":"ProvidedTypesContext.ConvertSourceExprToTarget \nConvertSourceExprToTarget \n\n Returns a quotation rebuilt with resepct to the types from the target referenced assemblies.  Normally\n this method should not be used directly when authoring a type provider.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html#ConvertSourceTypeToTarget","title":"ProvidedTypesContext.ConvertSourceTypeToTarget","content":"ProvidedTypesContext.ConvertSourceTypeToTarget \nConvertSourceTypeToTarget \n\n Returns a type from the referenced assemblies that corresponds to the given design-time type.  Normally\n this method should not be used directly when authoring a type provider.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html#ConvertTargetTypeToSource","title":"ProvidedTypesContext.ConvertTargetTypeToSource","content":"ProvidedTypesContext.ConvertTargetTypeToSource \nConvertTargetTypeToSource \n\n Returns the design-time type that corresponds to the given type from the target referenced assemblies.  Normally\n this method should not be used directly when authoring a type provider.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html#GetSourceAssemblies","title":"ProvidedTypesContext.GetSourceAssemblies","content":"ProvidedTypesContext.GetSourceAssemblies \nGetSourceAssemblies \n\n Get the set of design-time assemblies available to use as a basis for authoring provided types.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html#GetTargetAssemblies","title":"ProvidedTypesContext.GetTargetAssemblies","content":"ProvidedTypesContext.GetTargetAssemblies \nGetTargetAssemblies \n\n Get the resolved referenced assemblies determined by the type provider configuration\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html#ReadRelatedAssembly","title":"ProvidedTypesContext.ReadRelatedAssembly","content":"ProvidedTypesContext.ReadRelatedAssembly \nReadRelatedAssembly \n\n Read the assembly related to this context\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html#ReadRelatedAssembly","title":"ProvidedTypesContext.ReadRelatedAssembly","content":"ProvidedTypesContext.ReadRelatedAssembly \nReadRelatedAssembly \n\n Read the assembly related to this context\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html#TryBindAssemblyNameToTarget","title":"ProvidedTypesContext.TryBindAssemblyNameToTarget","content":"ProvidedTypesContext.TryBindAssemblyNameToTarget \nTryBindAssemblyNameToTarget \n\n Try to find the given target assembly in the context\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html#TryBindSimpleAssemblyNameToTarget","title":"ProvidedTypesContext.TryBindSimpleAssemblyNameToTarget","content":"ProvidedTypesContext.TryBindSimpleAssemblyNameToTarget \nTryBindSimpleAssemblyNameToTarget \n\n Try to find the given target assembly in the context\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html#ReferencedAssemblyPaths","title":"ProvidedTypesContext.ReferencedAssemblyPaths","content":"ProvidedTypesContext.ReferencedAssemblyPaths \nReferencedAssemblyPaths \n\n Get the list of referenced assemblies determined by the type provider configuration\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-providedtypescontext.html#FSharpCoreAssemblyVersion","title":"ProvidedTypesContext.FSharpCoreAssemblyVersion","content":"ProvidedTypesContext.FSharpCoreAssemblyVersion \nFSharpCoreAssemblyVersion \n\n Try to get the version of FSharp.Core referenced. May raise an exception if FSharp.Core has not been correctly resolved\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html","title":"TypeProviderForNamespaces","content":"TypeProviderForNamespaces \n\n A base type providing default implementations of type provider functionality.\n \nTypeProviderForNamespaces.( .ctor ) \n( .ctor ) \nTypeProviderForNamespaces.( .ctor ) \n( .ctor ) \nTypeProviderForNamespaces.AddNamespace \nAddNamespace \nTypeProviderForNamespaces.ApplyStaticArgumentsForMethod \nApplyStaticArgumentsForMethod \nTypeProviderForNamespaces.GetStaticParametersForMethod \nGetStaticParametersForMethod \nTypeProviderForNamespaces.Invalidate \nInvalidate \nTypeProviderForNamespaces.RegisterGeneratedTargetAssembly \nRegisterGeneratedTargetAssembly \nTypeProviderForNamespaces.RegisterProbingFolder \nRegisterProbingFolder \nTypeProviderForNamespaces.RegisterRuntimeAssemblyLocationAsProbingFolder \nRegisterRuntimeAssemblyLocationAsProbingFolder \nTypeProviderForNamespaces.ResolveAssembly \nResolveAssembly \nTypeProviderForNamespaces.Namespaces \nNamespaces \nTypeProviderForNamespaces.Disposing \nDisposing \nTypeProviderForNamespaces.TargetContext \nTargetContext"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#( .ctor )","title":"TypeProviderForNamespaces.( .ctor )","content":"TypeProviderForNamespaces.( .ctor ) \n( .ctor ) \nInitializes a type provider."},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#( .ctor )","title":"TypeProviderForNamespaces.( .ctor )","content":"TypeProviderForNamespaces.( .ctor ) \n( .ctor ) \nInitializes a type provider to provide the types in the given namespace."},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#AddNamespace","title":"TypeProviderForNamespaces.AddNamespace","content":"TypeProviderForNamespaces.AddNamespace \nAddNamespace \n\n Invoked by the type provider to add a namespace of provided types in the specification of the type provider.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#ApplyStaticArgumentsForMethod","title":"TypeProviderForNamespaces.ApplyStaticArgumentsForMethod","content":"TypeProviderForNamespaces.ApplyStaticArgumentsForMethod \nApplyStaticArgumentsForMethod \n\n Invoked by the host of the type provider to apply the static argumetns for a method.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#GetStaticParametersForMethod","title":"TypeProviderForNamespaces.GetStaticParametersForMethod","content":"TypeProviderForNamespaces.GetStaticParametersForMethod \nGetStaticParametersForMethod \n\n Invoked by the host of the type provider to get the static parameters for a method.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#Invalidate","title":"TypeProviderForNamespaces.Invalidate","content":"TypeProviderForNamespaces.Invalidate \nInvalidate \n\n Invoked by the type provider to invalidate the information provided by the provider\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#RegisterGeneratedTargetAssembly","title":"TypeProviderForNamespaces.RegisterGeneratedTargetAssembly","content":"TypeProviderForNamespaces.RegisterGeneratedTargetAssembly \nRegisterGeneratedTargetAssembly \n\n Register that a given file is a provided generated target assembly, e.g. an assembly produced by an external\n code generation tool.  This assembly should be a target assembly, i.e. use the same asssembly references\n as given by TargetContext.ReferencedAssemblyPaths\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#RegisterProbingFolder","title":"TypeProviderForNamespaces.RegisterProbingFolder","content":"TypeProviderForNamespaces.RegisterProbingFolder \nRegisterProbingFolder \n\n Registers custom probing path that can be used for probing assemblies\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#RegisterRuntimeAssemblyLocationAsProbingFolder","title":"TypeProviderForNamespaces.RegisterRuntimeAssemblyLocationAsProbingFolder","content":"TypeProviderForNamespaces.RegisterRuntimeAssemblyLocationAsProbingFolder \nRegisterRuntimeAssemblyLocationAsProbingFolder \n\n Registers location of RuntimeAssembly (from TypeProviderConfig) as probing folder\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#ResolveAssembly","title":"TypeProviderForNamespaces.ResolveAssembly","content":"TypeProviderForNamespaces.ResolveAssembly \nResolveAssembly \n\n AssemblyResolve handler. Default implementation searches \u003Cassemblyname\u003E.dll file in registered folders\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#Namespaces","title":"TypeProviderForNamespaces.Namespaces","content":"TypeProviderForNamespaces.Namespaces \nNamespaces \n\n Invoked by the type provider to get all provided namespaces with their provided types.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#Disposing","title":"TypeProviderForNamespaces.Disposing","content":"TypeProviderForNamespaces.Disposing \nDisposing \n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/reference/providerimplementation-providedtypes-typeproviderfornamespaces.html#TargetContext","title":"TypeProviderForNamespaces.TargetContext","content":"TypeProviderForNamespaces.TargetContext \nTargetContext \n\n The context for which code is eventually to be generated. You should not normally\n need to use this property directly, as translation from the compiler-hosted context to \n the design-time context will normally be performed automatically.\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/technical-notes.html","title":"Technical Notes\n","content":"# Technical Notes\n\nA type provider is simultaneously a tool and a library. There is a component that runs at compile-time (also called \u0022design-time\u0022) and a component\nthat runs at runtime. F# type providers are hosted by applications using FSharp.Compiler.Service.\n\nFirst, some terminology: \n\n* The **Type Provider Run Time Component (TPRTC)** is the component referenced by \u0060\u0060#r\u0060\u0060 or \u0060\u0060-r:\u0060\u0060 on the command line or other configration of a host tool, e.g. \u0060\u0060FSharp.Data.dll\u0060\u0060.\n\n* The **Type Provider Design Time Component (TPDTC)**, e.g. \u0060\u0060FSharp.Data.DesignTime.dll\u0060\u0060 is the DLL that gets loaded into host tools.\n\n* The **host tool** is, for example \u0060\u0060fsc.exe\u0060\u0060 or \u0060\u0060fsi.exe\u0060\u0060, or some tool hosting \u0060\u0060FSharp.Compiler.Service.dll\u0060\u0060 such as \u0060\u0060devenv.exe\u0060\u0060 or \u0060\u0060FsAutoComplete.exe\u0060\u0060.\n\n## The Type Provider Runtime Component (TPRTC)\n  \nThis contains either a [\u0060\u0060TypeProviderAssembly\u0060\u0060](https://fsharp.github.io/fsharp-core-docs/reference/fsharp-core-compilerservices-typeproviderassemblyattribute.html) attribute indicating that  this component is also a TPDTC, or \u0060\u0060TypeProviderAssembly(\u0022MyDesignTime.dll\u0022)\u0060\u0060 attribute indicating that the name of the design time component.\n  \nTPRTCs are normally \u0060netstandard2.0\u0060 or above.\n\n## The Type Provider Design Time Component (TPDTC)\n\nThe Type Provider Design Time Component (TPDTC) is, for example, \u0060\u0060FSharp.Data.DesignTime.dll\u0060\u0060.  \n\nThis is the DLL that gets loaded into host tools, and may be the same physical file as the TPRTC. This component includes the ProvidedTypes.fs/fsi files from the type provider SDK.\n\nTPDTC are generally netstandard2.0 or netstandard2.1 components.\n\nSee [Loading type providers](https://github.com/Microsoft/visualfsharp/issues/3736) for the rules to find TPDTC components.\n\n## Naming Conventions\n\nThe following guidance extends https://fsharp.github.io/2014/09/19/fsharp-libraries.html.\n\n* A type provider for a data source or schema format XYZ can often be placed in \u0060FSharp.Data\u0060, e.g. \u201CFSharp.Data.XYZ\u201D.\n\n* A type provider for interoperability can often be placed in\u0060FSharp.Interop\u0060, e.g. \u201CFSharp.Interop.XYZ\u201D.\n\nGood type provider naming examples:\n\n* \u0060FSharp.Text.RegexProvider\u0060\n* \u0060FSharp.Azure.StorageTypeProvider\u0060\n\nHere are some examples of existing type providers that aren\u0027t too bad (they are clear) but could be renamed to follow the guidelines:\n\n* \u0060ExcelProvider\u0060 (better would be \u0060FSharp.Interop.ExcelProvider\u0060)\n* \u0060RProvider\u0060 (better would be \u0060FSharp.Interop.RProvider\u0060)\n* \u0060ApiaryProvider\u0060 (better would be \u0060FSharp.Data.ApiaryProvider\u0060)\n* \u0060SQLProvider\u0060  (better would be \u0060FSharp.Data.SQLProvider\u0060)\n* \u0060DynamicsNAVProvider\u0060  (better would be \u0060FSharp.Interop.DynamicsNAVProvider\u0060)\n* \u0060DynamicsCRMProvider\u0060  (better would be \u0060FSharp.Interop.DynamicsCRMProvider\u0060)\n\n## Nuget package layout\n\nThe nuget package layout of a type provider follows these rules:\n\n1. The TPRTCs go under \u0060lib\u0060\n2. The TPDTC goes under \u0060typeproviders/fsharp41\u0060\n3. ALl dependencies of the TPDTC are bundled with the TPDTC (except the framework and FSharp.Core)\n\nFor examples:\n\n\u0060\u0060\u0060text\nlib/net45\n    FSharp.Data.dll\nlib/netstandard2.0\n    MyProvider.dll\n\ntypeproviders/fsharp41/netstandard2.0/\n    MyProvider.DesignTime.dll // TPDTC\n    MyDesignTimeDependency.dll // bundled dependencies of TPDTC\n\u0060\u0060\u0060\n\n## Dependencies\n\nRuntime dependencies are often the same as design time dependencies for simple type providers.  For more complex providers these can be different\n\n* The runtime dependencies are the dependencies of everything in your quotations in your type provider implementation.\n\n* The design dependencies are the dependencies of everything outside the quotations to decide and generate the provided types.\n\nThese dependencies are packaged and managed differently \n\n* The runtime dependencies are normal nuget package dependencies just like any normal .NET library. For example, if your type provider has Newtonsoft.Json as a runtime\n  dependency then your nuget package should list this a normal nuget dependency.\n\n* The design dependencies must all be bundled alongside your design-time DLL.  The design-time component is a component loaded into a tool like Ionide or\n  Visual Studio and must be loadable without referencing any other packages.\n \n## Lifetime of type provider instantiations\n\nF# type providers are hosted by applications using FSharp.Compiler.Service.\nThese notes describe the lifetime and typical resource usage of type provider instances for applications that incorporate \nFSharp.Compiler.Service (the host).  \n\nEach time the host application (e.g. devenv.exe) checks a file using type providers (e.g. containing \u0060JsonProvider\u003C\u0022...\u0022\u003E\u0060), one or more new TP instantiations may be created, along with subsequent calls to \u0060ApplyStaticArguments\u0060.   \n\n* The F# compiler service doesn\u0027t try to cache these (except where it caches the TAST structures that results of checking a file or project).\n\n* Individual type providers may use caching of some kind, returning previous provided types when the type provider is instantiated the same way.  Care should be taken that these caches do not permanently occupy resources\n\n* Under the hood, the majority of resources used by a TP instantiation are those required to \u0022map\u0022 the generated types to the referenced assemblies.  To support this, each TP Instantiation creates one ILModuleReader for each referenced assembly. When the compiler is used as a service, the natural (minimal)  lifetime of a ILModuleReader is the same as its TP Instanatiation.  The TPSDK may share these resources.\n\n* The natural (i.e. minimal) lifetime of a TP Instantiation and its related objects (ProvidedType ProvidedMethodInfo etc. etc. ) is the same as the TAST structures which refer these things (TProvidedTypeInfo, MethInfo, FieldInfo from infos.fs).\n\nThe lifetime of TAST structures is as long as they are held in the IncrementalBuilder, or you hold on to FSharpCheckFileResults, or FSharpCheckProjectResults, or FSharpAssemblyContents.  \n\n## Explicit construction of code: MakeGenericType, MakeGenericMethod and UncheckedQuotations\n\nSome type providers need to build code via explicit calls to \u0060FSharp.Quotations.Expr.*\u0060 rather than via quotation\nliterals. Frequently, this is needed when code must instantiate generic methods or types.  However, in some cases limitations\nof the F# quotations API are reached. \n\nIn these cases, follow these rules\n\n1. Always use \u0060ProvidedTypeBuilder.MakeGenericType(type, typeArguments)\u0060 rather than \u0060type.MakeGenericType(typeArguments)\u0060\n1. Always use \u0060ProvidedTypeBuilder.MakeGenericMethod(methInfo, methTypeArguments)\u0060 rather than \u0060methInfo.MakeGenericType(methTypeArguments)\u0060\n1. Where necessary open \u0060open ProviderImplementation.ProvidedTypes.UncheckedQuotations\u0060 and make quotation nodes representing calls and other operations using \u0060Expr.CallUnchecked\u0060.\n\nIf you don\u0027t do this you may get errors like\n\n\u0060\u0060\u0060text\n    The type provider \u0027FSharp.Configuration.ConfigTypeProvider\u002BFSharpConfigurationProvider\u0027 reported an error: Type mismatch when building \u0027args\u0027: invalid parameter for a method or indexer property. Expected \u0027System.Collections.Generic.IEnumerable\u00601[System.String]\u0027, but received type \u0027System.Collections.Generic.IEnumerable\u00601[System.String]\u0027.\uFFFDParameter name: receivedType\n\u0060\u0060\u0060\n\nor \n\n\u0060\u0060\u0060text\n    System.InvalidOperationException: the operation is not valid due to the current state of the object. at System.Reflection.MemberInfo.get_MetadataToken() in f:\\dd\\ndp\\clr\\src\\BCL\\system\\reflection\\memberinfo.cs:line 65\n\u0060\u0060\u0060\n\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/index.html","title":"The F# Type Provider SDK\n","content":"# The F# Type Provider SDK\n\n## Getting Started\n\nTo create a type provider use:\n\n\u0060\u0060\u0060text\ndotnet new -i FSharp.TypeProviders.Templates\ndotnet new typeprovider -n LemonadeProvider -lang F#\n\u0060\u0060\u0060\n\nThe template uses paket to acquire the files of the latest published type provider SDK.\n\n\u0060\u0060\u0060text\ncd LemonadeProvider\n\ndotnet tool restore\ndotnet paket update\ndotnet build -c release\n\ndotnet test -c release\n\u0060\u0060\u0060\n\nThe type provider also contains the logic necessary to package the type provider:\n\n\u0060\u0060\u0060text\ndotnet paket pack nuget --version 0.0.1\n\u0060\u0060\u0060\n\n## Examples\n\nSee examples the [\u0060examples\u0060](https://github.com/fsprojects/FSharp.TypeProviders.SDK/tree/master/examples) directory.\n\n## Resources\n\nFor advice on how to get started building a type provider, check out:\n\n - [Debugging Type Providers](debugging.html)\n - [Tehcnical Notes](technical-notes.html)\n - [Type Providers from the ground up](https://blog.mavnn.co.uk/type-providers-from-the-ground-up/) and the [follow up posts](https://blog.mavnn.co.uk/blog/categories/typeprovider/)\n\n\n"},{"uri":"https://fsprojects.github.io/FSharp.TypeProviders.SDK/debugging.html","title":"Debugging a Type Provider\n","content":"# Debugging a Type Provider\n\nDebugging a type provider can be difficult because it is a program run at compile-time and editing-time in host compilation tools including\n\u0060fsc.exe\u0060, \u0060devenv.exe\u0060 and \u0060FsAutoComplete.exe\u0060.\n\nThis articule discusses some techniques you can use to debug a type provider when it is run inside these different tools.\n\n## How do I debug execution of a type provider when using .NET SDK tools?\n\nTo debug a use of a type provider inside the \u0060dotnet\u0060 toolchain, you should first isolate a precise invocation of the \u0060dotnet\u0060 tool used in compilation.\n\n1. Capture output of \u0060dotnet build -v:n\u0060 in \u0060args.txt\u0060 and trim out the rubbish leaving just the command line arguments to the F# compiler, usually starting with \u0060-o:...\u0060\n\n2. Run an explicit invocation of the compiler, checking that your failures still happen, then debug that invocation.\n\nFor example, on Windows:\n\n\u0060\u0060\u0060text\n\u0022c:\\Program Files\\dotnet\\dotnet.exe\u0022 \u0022C:\\Program Files\\dotnet\\sdk\\2.1.403\\FSharp\\fsc.exe\u0022 @args.txt\n\ndevenv /debugexe \u0022c:\\Program Files\\dotnet\\dotnet.exe\u0022 \u0022C:\\Program Files\\dotnet\\sdk\\2.1.403\\FSharp\\fsc.exe\u0022 @args.txt\n\u0060\u0060\u0060\n\nBe careful to make sure Visual Studio debugging type is set to \u0022.NET Core\u0022 (right click properties on dotnet and set debug type). Set first-catch exception handling (Ctrl-Alt-E, select all CLR exceptions) and set Just My Code off.\n\n## How do I debug execution of a type provider hosted in F# Interactive?\n\nIf your failures only happen in F# Interactive then use \u0060devenv /debugexe fsi.exe MyProj.fsproj\u0060, or a simialr .NET SDK invocation.\n\n## How do I debug execution of a type provider inside an IDE?\n\nThis can be quite tricky. First try to unit-test the type-provider and debug command-line invocations thoroughly.  If your failures only happen\nin Visual Studio, then use \u0060devenv /debugexe devenv.exe MyProj.fsproj\u0060, set debug type to  \u0022.NET Framework 4.0\u0022\nand launch F5.\n\n## How do I debug execution of a type provider when using .NET Framework tools?\n\nTo debug a use of a type provider inside the \u0060msbuild\u0060 toolchain (.NET Framework), you should first isolate a precise invocation of the \u0060dotnet\u0060 tool used in compilation.\n\n1. Capture output of \u0060msbuild -v:n\u0060 in \u0060args.txt\u0060 and trim to leave the command line arguments to the F# compiler, usually starting with \u0060-o:...\u0060\n\n2. Run an explicit invocation of the compiler using this, checking that your failures still happen, then debug that invocation.\n\nFor example, on Windows:\n\n\u0060\u0060\u0060text\nfsc.exe @args.txt\n\ndevenv /debugexe fsc.exe @args.txt\n\u0060\u0060\u0060\n\nSet first-catch exception handling (Ctrl-Alt-E, select all CLR exceptions) and set Just My Code off.\n\n## A dependency of my type provider is not loading, what do I do?\n\nFor example, let\u0027s say you have this error in your test project:\n\n\u0060\u0060\u0060text\n2\u003EE:\\GitHub\\admin\\joe-provider\\test\\Joe.Test\\ProviderTests.fs(8,10): error FS3033: The type provider \u0027Joe.Provider.JoeProvider\u0027 reported an error: Could not load file or assembly \u0027Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed\u0027. The system cannot find the file specified. [E:\\GitHub\\dsyme\\joe-provider\\test\\Joe.Test\\Joe.Test.fsproj]\n\u0060\u0060\u0060\n\nHere your test project is referencing your provider project, and your type provider has a dependency on \u0060Newtonsoft.Json.dll\u0060. To see what\u0027s going on, run\n\n\u0060\u0060\u0060text\ndotnet build -v:n\n\u0060\u0060\u0060\n\nIn the compilation of your test project you will see something like this:\n\n\u0060\u0060\u0060text\nC:\\Program Files\\dotnet\\dotnet.exe \u0022C:\\Program Files\\dotnet\\sdk\\3.1.401\\FSharp\\fsc.exe\u0022\n    -o:obj\\Debug\\net5.0\\Joe.Test.dll\n    ...\n    -r:E:\\GitHub\\admin\\joe-provider\\src\\Joe.Provider\\bin\\Debug\\netstandard2.0\\Joe.Provider.dll\n    ...\n\u0060\u0060\u0060\n\n1. The tool \u0060fsc.exe\u0060 is trying to load the type provider but a dependency is not found.  As mentioned above, all dependencies must be packaged\n   alongside your design time component.  For example, adding\n\n   \u0060\u0060\u0060text\n       \u003CContent Include=\u0022..\\..\\packages\\Newtonsoft.Json\\lib\\netstandard2.0\\Newtonsoft.Json.dll\u0022 CopyToOutputDirectory=\u0022PreserveNewest\u0022 /\u003E\n   \u0060\u0060\u0060\n\n   will include the component and unblock you.  However, you will need to be careful to make sure this component is laid down in the right place in your nuget\n   package, see the instructions above for what the final layout of the nuget package should be.\n\n2. When making type providers whose design-time components have dependencies, you should always use a \u0022split\u0022 type provider that separates the design-time and runtime components.\n\nTODO: give exact .fsproj/nuget instructions to get the dependency into the \u0060typeproviders\\fsharp41\\netstandard2.0\u0060 directory alongside the design-time component.\n\n"}]